<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Docker on MyDevOpsTeam WorkShops</title><link>https://workshops.mydevopsteam.io/containerization/docker/</link><description>Recent content in Docker on MyDevOpsTeam WorkShops</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://workshops.mydevopsteam.io/containerization/docker/index.xml" rel="self" type="application/rss+xml"/><item><title>Docker installation</title><link>https://workshops.mydevopsteam.io/containerization/docker/docker-installation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://workshops.mydevopsteam.io/containerization/docker/docker-installation/</guid><description>Installation on Linux Installation on Windows Installation on MacOS Installation on Linux To install it on linux, fireup your terminal and run:
Note: You must have atleast sudo powers! And version will differ based on your linux distro.
sudo apt update -y sudo apt install docker.io -y sudo systemctl enable --now docker Now, add your non-root user to the docker group:
export IAMUSER=`whoami` sudo usermod -aG docker $IAMUSER Let&amp;rsquo;s test it:</description></item><item><title>Creating your first docker container</title><link>https://workshops.mydevopsteam.io/containerization/docker/creating-first-container/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://workshops.mydevopsteam.io/containerization/docker/creating-first-container/</guid><description>Pre-requisites Docker Installation Initiate your project. Create a folder called my-first-docker-project and contents folder: mkdir my-first-docker-project contents Create a file called Dockerfile: touch Dockerfile vim Dockerfile Add the following contents: FROM nginx:latest COPY contents /usr/share/nginx/html Create index.html file inside the contents folder for your static page that will be served by NGINX proxy. Run the command via: vim contents/index.html Then, add the following content:
&amp;lt;!DOCTYPE HTML&amp;gt; &amp;lt;head&amp;gt; &amp;lt;title&amp;gt;My First Container&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;center&amp;gt; &amp;lt;h1&amp;gt;Welcome to my First Container&amp;lt;/title&amp;gt; &amp;lt;/center&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; Build your container using the following commands.</description></item><item><title>Containerizing golang application</title><link>https://workshops.mydevopsteam.io/containerization/docker/containerizing-golang-application/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://workshops.mydevopsteam.io/containerization/docker/containerizing-golang-application/</guid><description>What is Go? Go is a statically typed, compiled high-level programming language designed at Google by Robert Griesemer, Rob Pike, and Ken Thompson. It is syntactically similar to C, but with memory safety, garbage collection, structural typing, and CSP-style concurrency.
Prerequisite: Make CLI (GNU Make) Docker CLI Create your first golang app: Create your hello-world-go project: mkdir go-rest-helloworld cd go-rest-helloworld go mod init golang/go-rest-helloworld Create Makefile to build your go app to avoid repeatable commands: Fire up the editor and add the ff: Then, add the following content:</description></item></channel></rss>